#однострочный комментарий

'''
Многострочный комментарий
'''

"""
Ещё один вариант комментариев
"""

#Как объявить переменную?
'''
Переменная - поименнованая область оперативной памяти
из которой данные можно прочитать или в которую их можно записать

Язык регистрозависимый, интерпретируемый, язык с динамической типизацией с
автоматической сборкой мусора.
Правила именования переменных.
Примеры названий переменных: a1

Стандарт PEP-8 "Описывает как правильно писать код" - есть на русском
'''

username = 'root' #присвоение имя пользования
print(username)

username = 'toor' #присвоить новое значение
print(username)

'''
В Python-е нет констант
'''

#Какие типы данных существуют в Python-е

'''
Тип данных переменной является её характеристикой и описывает следующее:
- количество памяти, который занимает данный типы
- диапозон допустимых значений
- допустимые опареции
- формат отображения (для человека)

Типы данных делятся на:
- простые (скалярные) - в один момент времени хранит одно значение
	- int 		- целое число
	- float 	- число с плавующей точкой (других вещественных нет)
	- bool 		- логическое значение
	- complex 	- комплексное число
	- str 		- строка
	- bytes		- байтовая строка (только Python 3)
- сложные (составные, структурные) - в один момент времени хранят 
любое кол-во значений любого типа
	- tuple 	- кортеж
	- list 		- списка
	- set 		- множество
	- dict 		- словари
	- object	- объекты
- специальные типы (версия класификации от преподавателя):
	- None - пустота, отсутствие значения
'''

a = None #Просто объявления нет, это ошибка в Python-е

#bool - логическое значение
flag1 = True
flag2 = False

#int - целое число
i1 = 666
i2 = 0b10101 #двоичное представление
i3 = 0o755 #восьмеричная
i4 = 0xaf #шестнадцатиричная
#Переполнение числа приведёт к поведению как в Си

#float - число с плавующей точкой (других вещественных нет)
f1 = 1.23
f2 = 1e-3 #0.001
f3 = 1e6 #1000000

#complex
c1 = 3.14j #комплексное число

#str - три типа синтаксиса строк
s1 = 'string'
s2 = "str\"ing"

s3 = '''Многострочная строка''' 
#ничего не надо экранировать, 
#не надо использовать конкатенацию,
#сохраняются переносы и табуляции
#Такая же история с двойными ковычками
s4 = """Многострочная строка""" 

s5 = r'[12]{2}' #Сырая строка ничего не надо экранировать в нутри (отмена автоматического экранирования)
s6 = u'Unicode in Python 2' #В Python-е 3 все строки Unicode

#bytes - байтовая строка (только Python 3 в Python 2 (какой-то другой тип для этих целей))
s7 = b'Hello' #строка без кодировки, просто набор байт

#tuple - картеж. В качестве разделителя используется запятая
#Обращаемся через квадратные скобки по индексу от нуля
t1 = (1, 1.5, True, 'string', (1,2,3))
print(t1[3])
t2 = (546,) #Для создания картежи из одного элемента
#отличие от списка в том что картеж нельзя изменить после содания

# list - списки, списки можно менять
l1 = [(1,), [2], 'asd']
print(l1[0][0])
l1[0] = True
print(l1[0]) 

#set - множества (упорядоченное множество уникальных значений)
s1 = {1,1,2,2,3,3}
s2 = set() #создание пустого множества

# dict - словари (неупорядоченный тип данных)
d1 = {
	'id': 1,
	'name': 'Linus',
	'is_developer': True,
	'skills': ('C++', 'Linux')
	'adress':{
		'id':2
	}
}
print(d1['id'])
print(d1['name'])
print(d1['adress']['id'])
#Обращение к несуществующему индексу приведёт к ошибке
d1['id3'] = False
print(d1['id3'])

#Как определить тип данных?
print(type(d1)) #распечатается тип данных которые в переменной сейчас

#Приведение типов
i = '666'
i = int(i)
print(i, type(i)) #=> 666, <class int>

#Ещё одно деление типов данных на две группы:
#изменяемые типы и неизменяемые
'''
immutable (неизменяемые):
- bool, int, float, str, complex, bytes, tuple, None
mutable (изменяемые):
- list, dict, set, object
'''




