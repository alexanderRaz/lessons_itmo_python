#Какие операторы существуют в Python
"""
Операторы позволяют нам выполнять операции над переменными
Арифмитические операторы: + - * / % ** //
** - степень, может быть и дробная
// - целачисленная часть деления
Операторы сравнения: == != <> <= >=
<> - не равно (альтернатива)
Присваивания: = += -= *= /= %= **= //=
!!! Нет инкрементов и дикрементов
Логические:  and or not xor
Побитовые:   &   |  ~   ^   << >>
Операторы принадлежности: in, not in
in - хорош для поиска по ключам и спискам
Тождественности: is, not is
is - используется для проверки на None, запрещено проверка: a == None
"""

#Ветвление
#switch - переключатель отсутствует в этом языке
a = 1
b = 2
if a < b:
	print('a < b')
elif a == b:
	print('a = b')
else:
	print('b < a')

if a < b:
	print('a < b')
elif a == b:
	pass #создается пустой блок кода
else:
	print('b < a')
	
#Тернарный оператор
##Антипример
if True:
	username = 'Вася'
else:
	username = 'Петя'
##В как надо
username = 'Вася' if True else 'Петя'

#Циклы

i = 10

while i:
	print(i)
	i -= 1

j = 0
while True:
	if i % 2:
		continue #прорускает текущую итерацию (не нужно использовать - осуждается)
	if i == 10:
		break #мгновенное завершение цикла
	i += 1
	
#for
lst = [1,2,3]
for i in lst:
	print('Элемент списка:', i)

#range(число_не_включительное)
#range(число_от_включается, число_до_не_включительное)
#range(число_от_включается, число_до_не_включительное, шаг)
for i in range(5):
	print(i)
for i in range(10, 21):
	print(i)
for i in range(10, 21, 2):
	print(i)

#enumarate - пронумировывает любую последовательность
for i in enumarate(range(10, 21, 2)):
	print(i)

#распаковка (деструктуризация в JS)
a, b = a, b
for key, value in enumarate(range(10, 21, 2)):
	print(key, value)
	
# d1 - раннее созданный словарь
for i in d1:
	print(i); #будут выведены ключи

#.items() выведет список картежей
for key, value in d1.items():
	print(key, value); #будут выведены содержимое
	
#Срезы----------------------------------------------------------
s = 'Hellou, Python'
print(s[0]) #Обращение к нулевому символу
print(s[0:5]) #Срез получить новую строку с 0 до 5 индекса не включительно
print(s[:5]) #Срез от начала и до 5 индекса не включительно
print(s[5:]) #Срез от 5 индекса и до конца
print(s[::2]) #Третьим аргументов указывается шаг, убирает все четные
print(s[::-1]) #Строчка наоборот (реверс)
print(s[-1:]) #Срез от препоследнего и до конца

#Методы списка 
l = list(range(10)) #[0,1,2,3,4,5,6,7,8,9]
print(l[::-1]) #список наоборот
l2 = l[::] #создании копии списка
l == l2 #=>True
l is l2 #=>False
print(l[5:]) #c 5 и до конца

#Функии и методы списков ------------------------------
# len(l) - длинна списка
lst = list(range(10))
print('Длинна списка:', len(l))
#l.append(el) добавить элемент в конец списка
lst.append(10)
#l.insert(index, el) - добавляет элемент в указанную позицию

#пример собираем строку алфавит
#ord - код символа
#char - создаем символ по коду
s = []
for c in range(ord('a'), ord('z') + 1):
	'''s += chr(c)''' #такая склейка очень дорогая, не надо использовать
	s.append(chr(c))
print(''.join(s))
#другие методы https://pythonworld.ru/tipy-dannyx-v-python/spiski-list-funkcii-i-metody-spiskov.html
l1 = [1, 2, 2]
l2 = [3, 4, 3]
l3 = l1 + l2

l3.index(2, 1) #возвращается индекс первого вхождения элемента 2 начиная с 1 позиции

#Домашка

input() #Ввод данных из клавиатуры
print() #Вывод 


	
	
 




